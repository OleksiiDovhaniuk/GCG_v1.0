
<FileChooserListView>:
    # --------------------
    # ADD BACKGROUND COLOR
    # --------------------
    canvas.before:
        Color:
            rgb: 1, 1, 1
        Rectangle:
            pos: self.pos
            size: self.size
    layout: layout
    FileChooserListLayout:
        id: layout
        controller: root

[FileListEntry@FloatLayout+TreeViewNode]:
    locked: False
    entries: []
    path: ctx.path
    # FIXME: is_selected is actually a read_only treeview property. In this
    # case, however, we're doing this because treeview only has single-selection
    # hardcoded in it. The fix to this would be to update treeview to allow
    # multiple selection.
    is_selected: self.path in ctx.controller().selection

    orientation: 'horizontal'
    size_hint_y: None
    height: '48dp' if dp(1) > 1 else '24dp'
    # Don't allow expansion of the ../ node
    is_leaf: not ctx.isdir or ctx.name.endswith('..' + ctx.sep) or self.locked
    on_touch_down: self.collide_point(*args[1].pos) and ctx.controller().entry_touched(self, args[1])
    on_touch_up: self.collide_point(*args[1].pos) and ctx.controller().entry_released(self, args[1])
    BoxLayout:
        pos: root.pos
        size_hint_x: None
        width: root.width - dp(10)
        Lbl:
            # --------------
            # CHANGE FONT COLOR
            # --------------
            color: 0, 0, 0, 1
            id: filename
            text_size: self.width, None
            halign: 'left'
            shorten: True
            text: ctx.name
        Lbl:
            # --------------
            # CHANGE FONT COLOR
            # --------------
            color: 0, 0, 0, 1
            text_size: self.width, None
            size_hint_x: None
            halign: 'right'
            text: '{}'.format(ctx.get_nice_size())

<TreeViewNode>:
    canvas.before:
        Color:
            rgba:
                self.color_selected\
                if self.is_selected else self.odd_color if self.odd else self.even_color
        Rectangle:
            pos: [self.parent.x, self.y] if self.parent else [0, 0]
            size: [self.parent.width, self.height] if self.parent else [1, 1]
        Color:
            rgba: 1, 1, 1, int(not self.is_leaf)
        Rectangle:
            source: 'atlas://data/images/defaulttheme/tree_%s' % ('opened' if self.is_open else 'closed')
            size: self.height / 2.0, self.height / 2.0
            pos: self.x - dp(20), self.center_y - dp(8)
    canvas.after:
        Color:
            rgba: .5, .5, .5, .2
        Line:
            points: [self.parent.x, self.y, self.parent.right, self.y] if self.parent else []


<TreeViewLabel>:
    width: self.texture_size[0]
    height: max(self.texture_size[1] + dp(10), dp(24))
    text_size: self.width, None


<StencilView>:
    canvas.before:
        StencilPush
        Rectangle:
            pos: self.pos
            size: self.size
        StencilUse

    canvas.after:
        StencilUnUse
        Rectangle:
            pos: self.pos
            size: self.size
        StencilPop


# <FlChsrListLayout>:
#     on_entry_added: treeview.add_node(args[1])
#     on_entries_cleared: treeview.root.nodes = []
#     on_subentry_to_entry: not args[2].locked and treeview.add_node(args[1], args[2])
#     on_remove_subentry: args[2].nodes = []
#     BoxLayout:
#         pos: root.pos
#         size: root.size
#         size_hint: None, None
#         orientation: 'vertical'
#         BoxLayout:
#             size_hint_y: None
#             height: '30dp'
#             orientation: 'horizontal'
#             Widget:
#                 # Just for spacing
#                 width: '10dp'
#                 size_hint_x: None
#             Label:
#                 text: 'Name'
#                 text_size: self.size
#                 halign: 'left'
#                 bold: True
#             Label:
#                 text: 'Size'
#                 text_size: self.size
#                 size_hint_x: None
#                 halign: 'right'
#                 bold: True
#             Widget:
#                 # Just for spacing
#                 width: '10dp'
#                 size_hint_x: None
#         ScrollView:
#             id: scrollview
#             do_scroll_x: False
#             Scatter:
#                 do_rotation: False
#                 do_scale: False
#                 do_translation: False
#                 size: treeview.size
#                 size_hint_y: None
#                 TreeView:
#                     id: treeview
#                     hide_root: True
#                     size_hint_y: None
#                     width: scrollview.width
#                     height: self.minimum_height
#                     on_node_expand: root.controller.entry_subselect(args[1])
#                     on_node_collapse: root.controller.close_subselection(args[1])

<FileChooserListView>:
    layout: layout
    FileChooserListLayout:
        id: layout
        controller: root

# <FileChooserIconLayout>:
#     on_entry_added: stacklayout.add_widget(args[1])
#     on_entries_cleared: stacklayout.clear_widgets()
#     ScrollView:
#         id: scrollview
#         pos: root.pos
#         size: root.size
#         size_hint: None, None
#         do_scroll_x: False
#         Scatter:
#             do_rotation: False
#             do_scale: False
#             do_translation: False
#             size_hint_y: None
#             height: stacklayout.height
#             StackLayout:
#                 id: stacklayout
#                 width: scrollview.width
#                 size_hint_y: None
#                 height: self.minimum_height
#                 spacing: '10dp'
#                 padding: '10dp'

<FileChooserIconView>:
    layout: layout
    FileChooserIconLayout:
        id: layout
        controller: root

[FileIconEntry@Widget]:
    locked: False
    path: ctx.path
    selected: self.path in ctx.controller().selection
    size_hint: None, None

    on_touch_down: self.collide_point(*args[1].pos) and ctx.controller().entry_touched(self, args[1])
    on_touch_up: self.collide_point(*args[1].pos) and ctx.controller().entry_released(self, args[1])
    size: '100dp', '100dp'

    canvas:
        Color:
            rgba: 1, 1, 1, 1 if self.selected else 0
        BorderImage:
            border: 8, 8, 8, 8
            pos: root.pos
            size: root.size
            source: 'atlas://res/images/defaulttheme/filechooser_selected'

    Image:
        size: '48dp', '48dp'
        source: 'atlas://res/images/defaulttheme/filechooser_folder'
        pos: root.x + dp(24), root.y + dp(40)

    Lbl:
        text: ctx.name[:-4]
        text_size: (root.width, self.height)
        halign: 'center'
        shorten: True
        size: '100dp', '16dp'
        pos: root.x, root.y + dp(16)

    Lbl:
        text: '{}'.format(ctx.get_nice_size())
        font_size: '11sp'
        color: .3, .3, .3, 1
        size: '100dp', '16sp'
        pos: root.pos
        halign: 'center'
